// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2023 12:40:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FinalDesign
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FinalDesign_vlg_sample_tst(
	A,
	B,
	Clock,
	ControlUnitIn,
	Reset,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  ControlUnitIn;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or ControlUnitIn or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FinalDesign_vlg_check_tst (
	1stOut,
	2ndOut,
	Neg,
	R1,
	R2,
	Sign,
	Student_ID,
	STUDENTN,
	sampler_rx
);
input [3:0] 1stOut;
input [3:0] 2ndOut;
input  Neg;
input [0:6] R1;
input [0:6] R2;
input [0:6] Sign;
input [0:6] Student_ID;
input [3:0] STUDENTN;
input sampler_rx;

reg [3:0] 1stOut_expected;
reg [3:0] 2ndOut_expected;
reg  Neg_expected;
reg [0:6] R1_expected;
reg [0:6] R2_expected;
reg [0:6] Sign_expected;
reg [0:6] Student_ID_expected;
reg [3:0] STUDENTN_expected;

reg [3:0] 1stOut_prev;
reg [3:0] 2ndOut_prev;
reg  Neg_prev;
reg [0:6] R1_prev;
reg [0:6] R2_prev;
reg [0:6] Sign_prev;
reg [0:6] Student_ID_prev;
reg [3:0] STUDENTN_prev;

reg [3:0] 1stOut_expected_prev;
reg [3:0] 2ndOut_expected_prev;

reg [3:0] last_1stOut_exp;
reg [3:0] last_2ndOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	1stOut_prev = 1stOut;
	2ndOut_prev = 2ndOut;
	Neg_prev = Neg;
	R1_prev = R1;
	R2_prev = R2;
	Sign_prev = Sign;
	Student_ID_prev = Student_ID;
	STUDENTN_prev = STUDENTN;
end

// update expected /o prevs

always @(trigger)
begin
	1stOut_expected_prev = 1stOut_expected;
	2ndOut_expected_prev = 2ndOut_expected;
end


// expected \1stOut [ 3 ]
initial
begin
	1stOut_expected[3] = 1'bX;
end 
// expected \1stOut [ 2 ]
initial
begin
	1stOut_expected[2] = 1'bX;
end 
// expected \1stOut [ 1 ]
initial
begin
	1stOut_expected[1] = 1'bX;
end 
// expected \1stOut [ 0 ]
initial
begin
	1stOut_expected[0] = 1'bX;
end 
// expected \2ndOut [ 3 ]
initial
begin
	2ndOut_expected[3] = 1'bX;
end 
// expected \2ndOut [ 2 ]
initial
begin
	2ndOut_expected[2] = 1'bX;
end 
// expected \2ndOut [ 1 ]
initial
begin
	2ndOut_expected[1] = 1'bX;
end 
// expected \2ndOut [ 0 ]
initial
begin
	2ndOut_expected[0] = 1'bX;
end 
// generate trigger
always @(1stOut_expected or 1stOut or 2ndOut_expected or 2ndOut or Neg_expected or Neg or R1_expected or R1 or R2_expected or R2 or Sign_expected or Sign or Student_ID_expected or Student_ID or STUDENTN_expected or STUDENTN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 1stOut = %b | expected 2ndOut = %b | expected Neg = %b | expected R1 = %b | expected R2 = %b | expected Sign = %b | expected Student_ID = %b | expected STUDENTN = %b | ",1stOut_expected_prev,2ndOut_expected_prev,Neg_expected_prev,R1_expected_prev,R2_expected_prev,Sign_expected_prev,Student_ID_expected_prev,STUDENTN_expected_prev);
	$display("| real 1stOut = %b | real 2ndOut = %b | real Neg = %b | real R1 = %b | real R2 = %b | real Sign = %b | real Student_ID = %b | real STUDENTN = %b | ",1stOut_prev,2ndOut_prev,Neg_prev,R1_prev,R2_prev,Sign_prev,Student_ID_prev,STUDENTN_prev);
`endif
	if (
		( 1stOut_expected_prev[0] !== 1'bx ) && ( 1stOut_prev[0] !== 1stOut_expected_prev[0] )
		&& ((1stOut_expected_prev[0] !== last_1stOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 1stOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 1stOut_expected_prev);
		$display ("     Real value = %b", 1stOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_1stOut_exp[0] = 1stOut_expected_prev[0];
	end
	if (
		( 1stOut_expected_prev[1] !== 1'bx ) && ( 1stOut_prev[1] !== 1stOut_expected_prev[1] )
		&& ((1stOut_expected_prev[1] !== last_1stOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 1stOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 1stOut_expected_prev);
		$display ("     Real value = %b", 1stOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_1stOut_exp[1] = 1stOut_expected_prev[1];
	end
	if (
		( 1stOut_expected_prev[2] !== 1'bx ) && ( 1stOut_prev[2] !== 1stOut_expected_prev[2] )
		&& ((1stOut_expected_prev[2] !== last_1stOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 1stOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 1stOut_expected_prev);
		$display ("     Real value = %b", 1stOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_1stOut_exp[2] = 1stOut_expected_prev[2];
	end
	if (
		( 1stOut_expected_prev[3] !== 1'bx ) && ( 1stOut_prev[3] !== 1stOut_expected_prev[3] )
		&& ((1stOut_expected_prev[3] !== last_1stOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 1stOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 1stOut_expected_prev);
		$display ("     Real value = %b", 1stOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_1stOut_exp[3] = 1stOut_expected_prev[3];
	end
	if (
		( 2ndOut_expected_prev[0] !== 1'bx ) && ( 2ndOut_prev[0] !== 2ndOut_expected_prev[0] )
		&& ((2ndOut_expected_prev[0] !== last_2ndOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 2ndOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 2ndOut_expected_prev);
		$display ("     Real value = %b", 2ndOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_2ndOut_exp[0] = 2ndOut_expected_prev[0];
	end
	if (
		( 2ndOut_expected_prev[1] !== 1'bx ) && ( 2ndOut_prev[1] !== 2ndOut_expected_prev[1] )
		&& ((2ndOut_expected_prev[1] !== last_2ndOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 2ndOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 2ndOut_expected_prev);
		$display ("     Real value = %b", 2ndOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_2ndOut_exp[1] = 2ndOut_expected_prev[1];
	end
	if (
		( 2ndOut_expected_prev[2] !== 1'bx ) && ( 2ndOut_prev[2] !== 2ndOut_expected_prev[2] )
		&& ((2ndOut_expected_prev[2] !== last_2ndOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 2ndOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 2ndOut_expected_prev);
		$display ("     Real value = %b", 2ndOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_2ndOut_exp[2] = 2ndOut_expected_prev[2];
	end
	if (
		( 2ndOut_expected_prev[3] !== 1'bx ) && ( 2ndOut_prev[3] !== 2ndOut_expected_prev[3] )
		&& ((2ndOut_expected_prev[3] !== last_2ndOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 2ndOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 2ndOut_expected_prev);
		$display ("     Real value = %b", 2ndOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_2ndOut_exp[3] = 2ndOut_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FinalDesign_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg ControlUnitIn;
reg Reset;
// wires                                               
wire [3:0] 1stOut;
wire [3:0] 2ndOut;
wire Neg;
wire [0:6] R1;
wire [0:6] R2;
wire [0:6] Sign;
wire [0:6] Student_ID;
wire [3:0] STUDENTN;

wire sampler;                             

// assign statements (if any)                          
FinalDesign i1 (
// port map - connection between master ports and signals/registers   
	.\1stOut (1stOut),
	.\2ndOut (2ndOut),
	.A(A),
	.B(B),
	.Clock(Clock),
	.ControlUnitIn(ControlUnitIn),
	.Neg(Neg),
	.R1(R1),
	.R2(R2),
	.Reset(Reset),
	.Sign(Sign),
	.Student_ID(Student_ID),
	.STUDENTN(STUDENTN)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Clock
initial
begin
	Clock = 1'b0;
	Clock = #5000 1'b1;
	Clock = #5000 1'b0;
	Clock = #5000 1'b1;
	# 5000;
	repeat(8)
	begin
		Clock = 1'b0;
		Clock = #5000 1'b1;
		# 5000;
	end
end 

// ControlUnitIn
initial
begin
	ControlUnitIn = 1'b0;
	ControlUnitIn = #10000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

FinalDesign_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.ControlUnitIn(ControlUnitIn),
	.Reset(Reset),
	.sampler_tx(sampler)
);

FinalDesign_vlg_check_tst tb_out(
	.1stOut(1stOut),
	.2ndOut(2ndOut),
	.Neg(Neg),
	.R1(R1),
	.R2(R2),
	.Sign(Sign),
	.Student_ID(Student_ID),
	.STUDENTN(STUDENTN),
	.sampler_rx(sampler)
);
endmodule

